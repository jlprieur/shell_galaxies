C++***********************************************************************
C Catalogue of JLP programs (in SOURCE)
C Convention:
C 1 : 2-D image processing
C 2 : Processing of profiles, spectra (1-D)
C 3 : Modelling/mathematics
C 4 : Format conversion, access to various format
C 5 : Graphics
C 6 : Miscellaneous
C 7 : Aperture synthesis (speckle)
C 8 : Celestial mechanics/atmospheric dispersion
C
C JLP
C Version 24-11-2004
C--**********************************************************************

# ABSORPTION         
% 8 	
@ Program 
& source
> To calculate the airmass of an observation. Precess the coordinates, 
> and calculate the local sidereal time (Approximation)
$ Fortran source.

# APP_FLATTENING     
% 3 
@ Program 
& source
> To compute the apparent flattening of a population
> of biaxial or triaxial galaxies
$ Fortran source.

# ARCSMOOTH     
% 1 
@ Program 
& source
> To calculate gradients and laplacian along radial directions.
> Doesn't seems to be very convincing for shell galaxies...because of too 
> many stars (tried with PDS scan).
$ Fortran source.

# ARGS_ELLIPSE         
% 5 
@ Program 
& source
> To display portions of ellipses on the ARGS. Calls ARGS_DISPLAY
$ Fortran source.

# ARITHM        
% 1
@ Program
& source
> To perform arithmetic operations on image files :
>       + constant, - constant, * constant, / constant,
>       addition, subtraction, division of two files
> Uses ARITHM_SET.FOR
$ Fortran source.

# ARITHM_COLUMNS        
% 2
@ Program
& source
> To perform arithmetic operations on columns X, Y1, Y2 of lists 
$ Fortran source.

# ATM_REFRAC        
% 8
@ Program
& source
> To compute atmospheric refraction. Used for the speckle camera (Risley 
> prisms). 
$ Fortran source.

# AUTO_SCALE
% 1
@ Program
& source
> To compute statistics on image files, in order to obtain a good scale
> for display. Allows entry of a sub-window only. 
$ Fortran source.

# BACKGROUND     
% 1 
@ Program 
& source
> Fits a polynomial to the background of an image with
> the possibility of excluding 2 rectangular areas for the fit.
> In each individual cell the mean and standard deviation are computed
> through an iterative process discarding all the points over 3 sigma.
> Then a Chebycheff polynomial is fitted to these points.
> Possibility of subtracting or dividing the input image by this polynomial.
$ Fortran source.
   
# BDF_PRO
% 4 
@ Program 
& source
> To convert BDF files with only 1 line or XY list files to sequential files
> in X and Y (Used to convert Figaro spectra to "standard" X,Y files)
$ Fortran source.

# CALCUL
% 6
@ Program
& source
> Pocket calculator functions : 
> To calculate the mean, the standard deviation of a series 
> of values, or to calculate the Log or the Exp of a number, or to
> generate a file with an ellipse, or to calculate SQRT(tab1**2+tab2**2).
$ Fortran source.

# CALIB
% 6	
@ Program 
& source
> To calculate the zero magnitude for the calibration of
> images. Different systems for the atmospheric absorption are 
> available. In input : a catalogue of parameters for the standards
> (name, V, B-V, U-B) ; and a file of data (name, filter, 
> total counts, and exposure). Both can be generated by this program.  
> Output in "calib.log" 
$ Fortran source.

# CALIBPDS1
% 2 
@ Program 
& source
> To compute the calibration curve Log(Intensity) versus Log(Density) for
> PDS scans when 2 profiles of the same object are available : one
> from a calibrated plate or CCD picture, and the other from the PDS
> scan. Fits interactively a polynomial to this curve which is then
> used by CALIBPDS2.
$ Fortran source.

# CALIBPDS2 
% 1
@ Program 
& source
> Transform a density image into intensity. Needs the coefficients 
> of the polynomial given by CALIBPDS1.
$ Fortran source.

# CCDCLEAN 
% 1
@ Program 
& source
> Cleans CCD pictures removing bad single or double columns, 
> and cosmic rays (from Dave Carter).
$ Fortran source.

# CENTROID1 
% 1
@ Program 
& source
> Works out the "accurate" positions of the stars whose approximative
> position has to be entered in an input list   X, Y, IDIAM   (like PATCH1).
$ Fortran source.

# CHECKFILE 
% 1
@ Program 
& source
> Reads image files, generates smaller or larger files, 
> prints or displays some lines or columns and computes mean and sigma
> in a given area.
$ Fortran source.

# CIRC_PHOTOM
% 1
@ Program
& source
> Performs circular aperture photometry on an image displayed on the Grinnel.
$ Fortran source.

# COMPRESS              
% 1
@ Program 
& source
> To compress an image by a factor 2. 
> Dynamic allocation of memory space for the input and output images
$ Fortran source.

# COMPRESS_CFHT           
% 1
@ Program 
& source
> To compress CCD images from CFHT by a factor 2.
$ Fortran source.

# CONTOUR1
% 1
@ Program 
& source
>  To contour an image at a series of levels
>  Each contour is written to an output file as an array with
>  coordinates X and Y, in pixels (Format compatible with ELPLOT).
$ Fortran source.

# CONVERT_FLUX
% 1
@ Program 
& source
> To convert magnitude to flux F_lambda (erg/s/cm2/A)
$ Fortran source.

# CONVERT_FORMAT             
% 4
@ Program 
& source
> To allow conversion between JLP formats:
> real*4/integer*2 CCD files from Toulouse, MIDAS, CDCA,
> real*4/integer*2 STARLINK BDF, 16/32 byte integer FITS, real FITS, ...
$ Fortran source.

# COORD_NORMALIZE
% 6
@ Program
& source
> Shell application: to "normalize" lists of coordinates 
> generated with GRINNEL or XYCURA, coming from different images,
> and get a uniform description (scale=1."/pixel, centre=(0.,0.), 
> north at 90 degrees).
> (For shell coordinates, to be used before EFIT6)
$ Fortran source.
 
# COORD_SCHMIDT
% 8
@ Program 
& source
> To give a rough estimation of the coordinates of an 
> object if we know the position X, Y on a plate (Palomar or SRC/ESRO).
> Not good if the object is near the poles. Useful as input for "CHART"
$ Fortran source.

# CRCORS    
% 2
@ Program 
& source
> To compute the cross-correlation of two spectra following
> Tonry and Davies.
> From David Carter.
$ Fortran source.

# CYLIN   
% 8
@ Program 
& source
> To project the catalogue of bright stars on a cylinder (planetarium project)
$ Fortran source.

# DEVAUC    
% 2
@ Program 
& source
> To fit a De Vaucouleurs'law to a profile created by
> PROFILE1. Uses least squares minimization NAG routine E04HFF. 
> Displays the fit and the residuals.
$ Fortran source.

# DISPLAY_MONGO
% 5
@ Program 
& source
> To display a binary image on a laserprinter for example, with MONGO/GKS
$ Fortran source.

# DISPLAY_PGPLOT
% 5
@ Program 
& source
> To display a binary image on the versatec for example, with PGPLOT
$ Fortran source.

# DRAW_MEUDON 
% 5
@ Program 
& source
> To display on a Tektronix or on the Grinnel numerical simulations
> sent by Dupraz and Combes with a special tape format.
$ Fortran source.

# DVHALO_QUINN    
% 3
@ Program
& source
> To compute the period as a function of the apocenter for a given potential
> (de Vaucouleurs and halo). Generates a table used by SHELLS_QUINN
> contained in FOR010.DAT, with the parameters in FOR009.DAT.
> From P. J. Quinn
$ Fortran source.

# EFIT6
% 3 	
@ Program 
& source
> Fits ellipses to shells with a fixed or moving centre. Calls EFIT.
> Accepts all kinds of input files (calls READFILE).
> Displays the fit and the input points on the ARGS or on a graphic device. 
$ Fortran source.

# ELLIPTIC_INT
% 3 	
@ Program 
& source
> To compute elliptic integrals and the "theoretical" shell profile
> given by Hernquist and Quinn 1988 (and show that their formula was wrong).
$ Fortran source.

# ELPLOT_MAIN
% 5
@ Program 
& source
> To display the contours and the fitted ellipses reading
> the output graphic files generated by FITELLI. 
> Correction if problems with the graphic files and/or display.
$ Fortran source.

# EVOLVE_CLUSTER
% 3
@ Program
& source
> Program to evolve the initial conditions created with the cluster-filament
> SETUP_CLUSTER program
> To plot the results use SIMU_PLOT
> From P. J. Quinn
$ Fortran source.

# EVOLVE_CLUSTER_2D
% 3
@ Program
& source
> Program to evolve the initial conditions created with the cluster-filament
> SETUP_CLUSTER program
> 2-D version of EVOLVE_CLUSTER, but not as well updated.
$ Fortran source.

# FFIELD
% 1
@ Program 
& source
> To calculate a mean flat field. 
> Two options: most likely value (sort of median), and mean with 3-sigma
> rejection.
> Tries to remove automatically the stars and defects by comparing the 
> different input images after normalization.
> See also "STACK1" for normalized files (median, mean, mode, min, max, ...)
$ Fortran source.

# FILTER1
% 6
@ Program
& source
> Special program to read filter lists (Toulouse).
$ Fortran source.

# FILTER_INDEX
% 6
@ Program
& source
> To deal with a set of filter transmissions.
> Use the indexed access file FILTER.CAT 
$ Fortran source.

# FILTRE
% 6
@ Program
& source
> Composition of different filters.
> Computes the equivalent band width, the rejection rates of filters,...
$ Fortran source.

# FITELLI
% 1 
@ Program 
& source
> Finds the contours and then fits an ellipse calling EFIT. 
> (WARNING : Sometimes the fit is not good, without any obvious reason,
> so it is better to check the result on the graphic output.)
> Graphic output in *.GRA, which is then displayed by ELPLOT.
>   Two modes : interactive or not.
>     - Interactive : Possibility of entering the points with a cursor,
>   after the usual automatic determination of the contour, if the user
>   does not want all the points of this contour (if there is a star or a bad 
>   column for instance). In the interactive mode, the fit is displayed on
>   a graphic terminal.
>     - Non interactive : no output on a graphic terminal (faster).
>   Creates "NAME".DAT, "NAME".GRA (Graphic), "NAME".PAR (Ellipse parameters)
>   For a clean output in a table use "READ_FIT" with NAME.PAR, and
>   then "LATEX".
>   For batch jobs use "FITELLI.COM" 
$ Fortran source.

# FITOU    
% 1 	
@ Program 
& source
> Displays isophotes on tektronix. The user enters the points interactively
> with the cursor and then ellipses are fitted to these points.
> Calls EFIT. 
$ Fortran source.

# FITS_CORRECT
% 4 	
@ Program 
& source
> To correct FITS format files when not fully to the standard (From Pic du
> Midi, for example)
$ Fortran source.

# FITS_READ  
% 4 	
@ Program 
& source
> Reads FITS formatted files on a disk or on the tape. 
> Read 16 or 32 bits/pixel, with files of 2880 bytes/block (standard), 
> or any other length
> (like 512 which is used when transferring the files with FTP).
$ Fortran source.

# FITS_WRITE
% 4 	
@ Program 
& source
> Writes FITS formatted files on a disk or on tape. Writes 16 or 32 bits/pixel,
> with files of 2880 records/block (standard), or any other length
> (like 512 which is used when transferring the files with FTP).
$ Fortran source.

# FLATT2M   
% 1 
@ Program 
& source
> To correct T2M CCD frames for the "crater" defect. Not very convincing...
$ Fortran source.

# GRADIENT1  
% 1 
@ Program 
& source
> To compute a gradient map of a CCD image.
> Works on the logarithm of the image.
> From Bill Sparks, but modified : the grid has been extended to 5*5.
$ Fortran source.

# GRAPHIC.DOC  
% 5 
@ Documentation 
& source
> Available graphic packages and devices
$ Fortran source.

# GRINNEL
% 5 
@ Program 
& source
> To display an image on the Grinnel. Cursor, Zoom, Grey levels,
> Color planes, Output of the points in GRINNEL.DAT. Possibility of
> displaying an image only on one plane (out of 3).
$ Fortran source.

# GRI_ELLI 
% 5
@ Program  
& source
> From ARGPLOT, to draw ellipses on the Grinnel.
$ Fortran source.

# HANKEL 
% 2
@ Program
& source
> To smooth a radial profile using an arbitrary P.S.F.. Uses Hankel transforms
> of the P.S.F. and the surface brightness profile.
> From Tim Bruce (MSO).
$ Fortran source.

# HELP_JLP  
% 6 
@ Program 
& source
> To get some information about the programs and routines available
> in this package.
$ Fortran source.

# HELP_SYNTAX
% 6
@ Program
& source
> To read the help header of a program (limited with C++ and C--):
> This program is mainly used with 
>       RUNS name_of_the_file ?
>  or 
>       RUNS name_of_the_doc ??
$ Fortran source.

# HISTO  
% 5 
@ Program 
& source
> To display histograms of rows from an image 
$ Fortran source.

# HUBBLE                
% 2
@ Program 
& source
> To fit a modified Hubble law to a profile created by PROFILE1.
> Broadens the model to take into account the effect of the seeing.
> Displays the fit and the residuals.
> Uses the set of subroutines PROJECT.
> Output : "hubble.dat", free format file with two curves : 
> 1= model, and 2= original profile.
> ( format: number1,N*(X1(I),Y1(I)),number2,N*(X2(I),Y2(I)))
$ Fortran source.

# INTMAGNI 
% 2  
@ Program 
& source
> To calculate the integrated magnitude of a file created
> by PROFILE1 within two limiting radii.  
$ Fortran source.

# ISOPHOTE
% 5 
@ Program 
& source
> To draw the isophotes of an image.
> Interactive input of points if graphic terminal allows it.
> Uses ISOPHOTE_SET
$ Fortran source.

# IUE_VISIB    
% 8
@ Program
& source
> To compute the visibility of stars with the IUE satellite.
> From C. Boisson (April 1989)
$ Fortran source.

# JLP_PROG.DOC
% 6 
@ Catalogue
& source
> Describe all the programs contained in "SOURCE"
> Read by "HELP_JLP"
$ Fortran source.

# JLP_SUBR.DOC
% 6  
@ Catalogue
& source
> Describe all the sets of subroutines contained in "JLP_SUB"
> Read by "HELP_JLP"
$ Fortran source.

# KING1
% 2   
@ Program 
& source
> Fits a King's model to a profile created by PROFILE1.
> Broadens the model to take into account the effect of the seeing.
> Displays the fit and the residuals.
> Uses KING_MODEL and PROJECT
> Output : "king.dat", free format file with two curves : 1= model, and
> 2= original profile.
> ( format: number,N*(X1(I),Y1(I),Y2(I)))
$ Fortran source.

# LOWER_CASE 
% 6
@ Program
& source
> To change a program from upper case to lower case.
> See also UPPER_CASE
$ Fortran source.

# MAGNITUDE 
% 1 
@ Program 
& source
> To compute the magnitudes of the shells and sections of the
> galaxies observed at the CFHT . Contains all the parameters of the 
> CFHT CCD files. (From Steve Meatheringham)
$ Fortran source.

# MAGNI_INT
% 1 
@ Program 
& source
> to compute integrated magnitudes of the shells
$ Fortran source.

# MASK
% 1 
@ Program 
& source
> To generate a 2-D mask and/or multiply by this mask.
$ Fortran source.

# MASS_HUBBLE
% 3 
@ Program 
& source
> To compute mass and luminosity integrals of a galaxy with a Hubble
> density distribution. 
> (Options : Mass , Luminosity and inversion of the surface brightness).
$ Fortran source.

# MEDIAN1
% 1
@ Program 
& source
> To filter an image with the median filter. Calls NAG routine for sorting the
> values inside the box.
> From "MEDIAN" ASPIC routine
$ Fortran source.

# MIDAS_TAB
% 5
@ Program 
& source
> Test program to read MIDAS tables
$ Fortran source.

# MIRROR
% 1
@ Program
& source
> X-Y mirror version of an image
$ Fortran source.

# MODIF_HEADER
% 4 
@ Program 
& source
> To change the header of CCD files.
$ Fortran source.

# MORPHOLOGY
% 1
@ Program
& source
> Morphological operation such as :
> Erosion, dilatation, closure (?) and opening (?), 
> and median filter (but it is better to use MEDIAN for this option).
$ Fortran source.

# MOSAIC
% 1 	
@ Program 
& source
> To add images shifted by "SHIFT" in order to get a mosaic
> with different CCD images. Needed in input : sky level and ratio of
> the intensities of the two images.
$ Fortran source.

# NORMALIZE1
% 1
@ Program
& source
> To normalize two images, i.e. obtain the offset and gain, by plotting
> the values of one versus the corresponding values on the other
> From STARLINK package.
$ Fortran source.

# OPTIC 
% 6
@ Program 
& source
> To compute parameters of combinations of thin lenses. 
$ Fortran source.

# PATCH1
% 1
@ Program
& source
> To remove stars from an image in batch mode.
> Works with a constant sigma all over the image.
> In input needs a list of values X,Y,IDIAM where X,Y are the
> position of the centre of the patch, and IDIAM the diameter
> (REMSTAR provides such lists in an automatic process).
>
> For interactive removal use the option "PATCH" in GRINNEL program.
$ Fortran source.

# PERIOD   
% 3 
@ Program 
& source
> To compute periods of pendular orbits in different potentials
> (Kepler and King model). Uses KING_MODEL.
$ Fortran source.

# PHOTO_VERSA
% 5 
@ Program 
& source
> To display an image on the Versatec either in greyscale or with contours
> Uses PGPLOT package
$ Fortran source.

# PIPCCD    
% 4 
@ Program 
& source
> To read a tape written with the PDP/11 PIP copy facility.
> Writes in CCD format. Reads real or integer files.
$ Fortran source.

# PLAGAL      
% 1   
@ Program 
& source
> To remove the galaxy in an image :
> Options :
>       Subtraction of a De Vaucouleurs's law
>       of a smoothed profile (fitted with a polynomial in LOG/LOG plane)
>       or the profile not smoothed.
> In input needs either a profile of the galaxy computed by PROFILE1
> or the De Vaucouleurs parameters of this profile.
> Possibility of an ellipticity variable with the radius.
> Sets to zero the pixels within a minimum radius.
> Uses "PLAGAL_SET"
>
> Nota : For Batch mode, use "PLAGAL_BATCH", simplified version of "PLAGAL".
$ Fortran source.

# PLAGAL_BATCH      
% 1   
@ Program 
& source
> To remove the galaxy in an image, simplified version of "PLAGAL"
> Only option 1 is available : subtraction of a smoothed profile
> (fitted with a polynomial in LOG/LOG plane)
> In input needs a profile of the galaxy computed by PROFILE1
> Reads the parameters of the ellipses from the header of the profile.
> only fixed ellipticity is available
> Uses "PLAGAL_SET"
$ Fortran source.

# PLOT1     
% 5
@ Program 
& source
> General program to plot curves XY or XY with error bars. 
> Calls READFILE for the input. 
> Possibility to perform diferent operations and to display in log/log,
> mag/rad, mag/rad**.25, and int/rad . 
> Possibility of graphic output with many packages (SPLOT). 
$ Fortran source.

# POLAR     
% 3 
@ Program 
& source
> To compute polar coordinates from XY coordinates 
$ Fortran source.

# POLY     
% 2 
@ Program 
& source
> To fit a  Chebyscheff polynomial to profiles. 
> Output : "poly.dat" : free format file with two curves.
$ Fortran source.

# POTEN1_3D    
% 3
@ Program 
& source
> To calculate a Schwarschid model in three dimensions, of
> a triaxial galaxy
$ Fortran source.

# POTEN2    
% 3
@ Program 
& source
> To compute different potential models : Schwarschid,
> Richstone (1980), [or King, but not finished ],
> in the three planes XY, YZ, ZX for oblate, prolate or triaxial galaxies.
$ Fortran source.

# PRECESSION
% 8
@ Program
& source
> To compute the precession of an astronomical object.
$ Fortran source.

# PRECOMPILER 
% 6
@ Program
& source
> To change a character string by another in programs
$ Fortran source.

# PROFILE1
% 1   
@ Program 
& source
> To calculate profiles along elliptical annuli
> Options : 
>	- Profile within an angular sector, with complete ellipses
>          or set of profiles in 12 sectors,
>       - Mean or median profile,
>       - Discarding points under a certain level.
>	- Output of the mask with the points which have been discarded 
>	   set to 0.
>
> In input needs a file containing the parameters of the profile,
> (a model is in SOURCE:PROFILE1.DOC)
>
> Output :
>   "profile1.log": listing of the chosen options and of the details
> of the operations.
>   Profile : free format file. The first value is the number of points
> Then in each line there is the equivalent radius, the corresponding
> surface brightness, and the number of points they concern.
$ Fortran source.

# PROFILES_PROC  
% 2
@ Program
& source
> Computes color indices from two profiles, or a synthetic profile
> by adding a short to a long exposure profile.
$ Fortran source.

# PROFILE_MODSQ
% 1
@ Program
& source
> Simpler version of PROFILE1 specially designed for "modsq", i.e. power
> spectra (centered, circular full profiles or within sectors) 
$ Fortran source.

# PROFILE_PLAIN
% 1
@ Program
& source
> Simpler version of PROFILE1 (older version).
$ Fortran source.

# PROFMINI 
% 2
@ Program
& source
> Computes a minimum profile from a set of 12 sector profiles computed
> by "PROFILE1" (Option 3).
$ Fortran source.

# PSTCOPY0    
% 5   
@ Program 
& source
> To display a 2D-image on the laserprinter in grey tones.
> Many options available.
$ Fortran source.

# QUICKGRAD2  
% 1 
@ Program 
& source
> To compute a gradient map of a CCD image with 2 passages
> in X and Y. From Bill Sparks, but slightly modified.
> Nota : try also GRADIENT1 which is better if the image is noisy.
$ Fortran source.

# RADIAL_TANGENTIAL  
% 1 
@ Program 
& source
> To compute a gradient in the radial direction
> or to smooth in the tangential direction. 
> Uses a matrix 5x5 with 24 different directions.
$ Fortran source.

# RDNANCAY  
% 2 
@ Program
& source
> To read HI data from Nancay. 
> Read files R0xxxx_174.SIR as created by PUTF (SIR)
> and write the output in R0xxxx.PROF.
> Please use SIR/PUTF first to extract records from RESULTAT.STD.
> (Written for data from Nov 1989 to Sept 1990).

$ Fortran source.

# READ_CATALOG 
% 6
@ Program 
& source
> To read SHELL.CAT, the catalogue containing general information
> about all the shell galaxies from Malin and Carter's catalogue.
> 3 options: 
>    1: output of the whole catalog in increasing right ascension
>    2: output of the whole catalog in increasing field number
>    3: output of a selection of the catalog (containing the key-word)
>    4: creation of a file containing the photometric measurements
>       in circular apertures.
> Output for printing in "read_catalog.log"
$ Fortran source.

# READ_COMMENTS         
% 4 	
@ Program 
& source
> To display the comments of a 2-D image file. 
> Wild card is allowed (works with the whole directory)
> When using a star * in the command line, please note that 
> the double quote " " is necessary with IBM...
$ Fortran source.

# READ_FIT 
% 6
@ Program 
& source
> To create catalogues from the ellipse parameters of the isophotes
> *.PAR generated by "FITELLI".
> The output is a catalogue of ellipse fits which is directly compatible with 
> the word processor LATEX.
$ Fortran source.

# READ_MEUDON 
% 4
@ Program
& source
> To read tapes from Dupraz and Combes. Special format.
$ Fortran source.

# READ_OBS
% 5
@ Program
& source
> To read the observation section from the general catalogue "SHELL.CAT"
> (Not really usefull since now the observations are in another catalogue
> SHELL_OBS.CAT)
$ Fortran source.

# RECEN_FFT
% 3
@ Program
& source
> Program to recentre the FFT of a given image
> Moves the zero from the origin to the center of the image
> or inversely.
> Keep the same size as original image.
$ Fortran source.

# REMGAL
% 1
@ Program 
& source
> Removes the galaxy from an image.
> Removes a smoothed profile with elliptical isophotes.
> The parameters of the ellipses depend on the equivalent radius.
$ Fortran source.

# REMGAL1
% 1
@ Program 
& source
> Removes the galaxy from an image.
> Removes a smoothed profile with elliptical isophotes.
> The parameters of the ellipses depend on the equivalent radius.
> (Same as REMGAL ?)
$ Fortran source.

# REMSTAR
% 1
@ Program 
& source
> To remove automatically the stars and small defects in an image
> containing a bright galaxy. Generates the list of positions
> and diameters to be used by "PATCH1".
> Works on the mask created by "PROFILE1" (3-sigma rejection).
> Its function is mainly to contour this mask and infer the centre and
> the diameter of the patches.
>
> After this stage, in the STARLINK environment, you can display
> the contours of the patches on the ARGS with REMSTAR_DISP, and 
> interactively suppress some patches or add new ones. 
$ Fortran source.

# REMSTAR_DISP   
% 1
@ Program 
& source
> In the STARLINK environment, displays the contours of a list of
> patches on the ARGS. Possibility of interactively suppressing
> some patches or adding new ones. Then use PATCH or PATCH1 to
> remove the defects and stars.
$ Fortran source.

# RENAME
% 6
@ Program 
& source
> To rename a series a files:
> Example:           rename *.mt *.fits  
$ Fortran source.

# RESAMPLE1      
% 1
@ Program 
& source
> To resample an image with a full 6-coefficients matrix.
> (Rotation, expansion and translation).
> Linear interpolation between the pixels.
> From "RESAMPLE" EDRS routine.
>
> Example : if the same object is (0,0) in the reference image
> and (2,3) in the image to shift, the matrix is :
>  2, 1, 0,
>  3, 0, 1      
> That you write in the coefficient file :    2.0 1.0 0.0 3.0 0.0 1.0
>
> See also: "SHIFT" when input/output images have different sizes.
$ Fortran source.

# RESIZE
% 1
@ Program 
& source
> Program to change the size of an image file
> enlarge or reduce it 
> Can keep the center in the middle of the larger/smaller frame.
> Useful for FFT's, when the image is not square, or to encrease the sampling
> in direct space.
$ Fortran source.

# RISLEY
% 8
@ Program 
& source
> Program to compute the residual dispersion
> of Risley prisms (to correct atmospheric dispersion)
> Used for computing the angle of Risley prisms for the TBL speckle camera.
$ Fortran source.

# SETUP_CLUSTER
% 3
@ Program
& source
> Program to setup initial conditions for the cluster-filament simulations
> After this program, use EVOLVE_CLUSTER.
> From P. J. Quinn
>
> Example: 
> Cluster, sigma=1000 km/s, rc=100 pc, Rt=1 Mpc
> Galaxy,  re=5 Kpc, Mass=1.E+11 Mo, Radius= 500 Kpc (initial position in 
>          the cluster), fraction=0.8
$ Fortran source.

# SETUP_CLUSTER1
% 3
@ Program
& source
> Program to set up initial conditions for the cluster
> filament simulations (simulation of shell formation).
> Isotropic cluster and isotropic filament galaxy
> From Peter Quinn Sept. 1987.
$ Fortran source.

# SHELL
% 2	
@ Program 
& source
> To fit a model of a spherical shell with a limited 
> angular extent to a profile.
> Displays the input profile, fits a background interactively,
> and fits a model, broadened by the seeing.
> (For the model : gaussian radial distribution, or X **-1/2 )
> Calls DISPLAY1, DISPLAY2, and POLYFIT.
$ Fortran source.

# SHELLS_PLOT_QUINN
% 3  
@ Program
& source
> Plots the radial shell distribution generated by SHELLS_QUINN,
> and comparison with real data.
>
> Some advice to fit data:
> -  start with an r1/4 galaxy without dark matter
> -  if the slope of the data is smaller than the computed
>    curve (i.e data points above the curve), increase Tau
> -  if the slope of the data is larger, you need to add dark matter....
> 
> Nota: the model starts with the Keplerian slope and then increases
>       its steepness with the isothermal model, in the inner regions. 
$ Fortran source.

# SHELLS_QUINN    
% 3
@ Program
& source
> Computes a shell diagram from the period/rmax data generated by 
> DVHALO_QUINN (input: FOR009.DAT, parameters, and FOR010.DAT, table).
> Output in SHELLS.SQI
> Then use SHELLS_PLOT_QUINN to display the diagrams.
$ Fortran source.

# SHELL_GEOM
% 2
@ Program
& source
> Processes the shell geometrical parameters generated by EFIT6.
> Output in 'Latex' format, diagrams of the shells, polar coordinates, etc.
$ Fortran source.

# SHELL_PHOTOM
% 2
@ Program
& source
> Processes the shell measurements generated by SHELL.
> Output of the colours and photometry of the shells, with a graph
> of the areas which have been measured.
$ Fortran source.

# SHELL_PROFILES
% 2
@ Program
& source
> Generates profile parameter files which can be used by "PROFILE1"
> to do the photometry of the shells. In input needs the catalogue of
> shell parameters created by EFIT6 or SHELL_GEOM.
$ Fortran source.

# SHIFT
% 1 
@ Program 
& source
> To shift an image and store it into a larger frame. This is
> normally the first step to get a mosaic with different images. 
> (See "MOSAIC")
> See also "RESAMPLE" when the size of the output and the input images
> are the same.
$ Fortran source.

# SIMU_PLOT
% 5
@ Program
& source
> Plots the results of the simulations generated by SETUP_QUINN/EVOLVE_QUINN.
$ Fortran source.

# SMOOTH1
% 1
@ Program
& source
> Smoothing program with a grid ("Top Hat", gaussian, or imposed by
> the user). Possibility of unsharp masking. Calls SMOOTH2.
$ Fortran source.

# SPEC_ASCII_TO_IMAGE
% 4
@ Program
& source
> To convert an ASCII list to a spectrum image file 
$ Fortran source.

# SPEC_BACK
% 2
@ Program
& source
> To substract a background to a 1-D spectrum 
> Fit a polynomial to a set of points or intervals 
> interactively input by the user
> Spectrum format: image file with flux in line #1, wavelength in line #2.
$ Fortran source.

# SPEC_COPYCAL
% 2
@ Program
& source
> To perform photometric calibration of a spectrum, 
> by using wavelength calibrated spectrum. 
> Simply copy line #2 of calibrated spectrum to uncalibrated spectrum.
> Spectrum format: image file with flux in line #1, pixel/wavelength in line #2.
$ Fortran source.

# SPEC_EXTRACT
% 2
@ Program
& source
> To extract a spectrum from a 2-D image 
> Possibility of rotation (but you can also use RESAMPLE1...)
> Output spectrum format: 
> image file with flux in line #1, wavelength (or pixel position) in line #2
$ Fortran source.

# SPEC_IMAGE_TO_ASCII
% 4
@ Program
& source
> To convert a spectrum image file to an ascii list 
$ Fortran source.

# SPEC_PHOTOCAL
% 2
@ Program
& source
> To perform photometric calibration of a spectrum, using a reference 
> absolute flux calibration spectrum.
> Spectrum format: image file with flux in line #1, wavelength in line #2.
$ Fortran source.

# SPEC_PLOT
% 2
@ Program
& source
> To plot a 1-D spectrum 
> Input spectrum format: 
> image file with flux in line #1, wavelength in line #2
$ Fortran source.

# SPEC_WAVECAL
% 2
@ Program
& source
> To perform wavelength calibration of a spectrum, using a reference catalog 
> Catalog format: col#1: wavelength col#2 intensity col#3 line name
> Spectrum format: image file with flux in line #1, wavelength in line #2.
$ Fortran source.

# SP_BACK
% 2
@ Program
& source
> Program to remove the background from a spectrum.
> Fits a polynomial, and then subtract this fit
> Designed for Parkes radio data (256 channels) (Nov 89).
> Reads ASCII files as created by Tom.
$ Fortran source.

# SP_FLUX
% 2
@ Program
& source
>  To process radio HI spectra from PARKES (Observations from Nov. 1989)
>  Computes the flux above the background (after SP_BACK)
>  Interactive mode or batch mode.
> Reads ASCII files as created by Tom.
$ Fortran source.

# SP_PLOT
% 2
@ Program
& source
> Program to plot spectra (from Parkes)
> Designed for Parkes radio data (256 channels) (Nov 89).
> Reads ASCII files as created by Tom.
$ Fortran source.

# SP_SCALE
% 2
@ Program
& source
> To create new X coordinates of a spectrum (special application
> for Parkes reduction...)
> Assumes that the central velocity is at pixel 128 (spectrum of 256 values)
> and set up a linear scale. For Parkes, vstep=-8.279 (f=1415.448 MHz)
$ Fortran source.

# SP_SELECT
% 2
@ Program
& source
>  To process radio HI spectra from PARKES (Observations from Nov. 1989)
>  Interactive selection of the quadrants, after displaying them.
>  Output: spectrum which is a weighted sum of the selected quadrants.
$ Fortran source.

# SP_SHIFT
% 2
@ Program
& source
>  To process radio HI spectra from PARKES (Observations from Nov. 1989)
>  Shift and add a series of spectra (with weight)
$ Fortran source.

# SQRT_IMAGE
% 1
@ Program
& source
> To transform an image to its square root (see also SQUARE_IMAGE) 
$ Fortran source.

# SQUARE_IMAGE
% 1
@ Program
& source
> To transform an image to its square (see also SQRT_IMAGE) 
$ Fortran source.

# STACK1
% 1
@ Program
& source
> To combine mutually aligned and normalised image
> Removes defects and blemishes
> Various modes available: median, mean, mode, min, max.
> From STARLINK package
$ Fortran source.

# STARFIT1
% 1
@ Program
& source
> Fits a mean gaussian profile to a set of stars. Needs in input the
> approximative position of the stars in a format similar to
> "PATCH1" : x, y, idiam (needs the diameter to take the brightest objects).
> From STARFIT EDRS routine
$ Fortran source.

# STRUCBA1
% 4 
@ Program 
& source
> To read special format CCD tapes from Pic du Midi Observatory (Uses MTACCESS).
$ Fortran source.

# SUM_FILES
% 1
@ Program
& source
>  To add many image files (up to 30) 
> See also "STACK1" (median, mean, mode, min, max, ...)
$ Fortran source.

# SYMBOLS.DOC
% 5
@ Document
& source
> List of the symbols available with NEWPLOT
> when STROMLO, GKS/MONGO, or PGPLOT are selected.
$ Fortran source.

# SYNTH_IMAGE
% 3
@ Program
& source
> To synthesize an image with isolated points
> (Used for contour tests for example)
$ Fortran source.

# TEST_CGRAD
% 3
@ Program 
& source
> To test conjugate gradient routines (contained in "conju_grad.c")
> Calls JLP_CGRAD
$ Fortran source.

# TEST_DISPLAY1
% 5
@ Program 
& source
> Short plotting program to test graphic packages.
> Calls DISPLAY1
$ Fortran source.

# TEST_NEWPLOT2
% 5
@ Program 
& source
> Short plotting program to test graphic packages.
> Calls NEWPLOT2
$ Fortran source.

# TEST_OSD
% 4
@ Program 
& source
> To test  jlp0_osd.c (in jlp/jlpacc.a) and osd.c (in midas/oslib.a library)
> Remember: osd is used as an interface between C/Fortran files...
$ Fortran source.


# TEST_VAX1
% 6
@ Program 
& source
> To test the modules in JLP_VAX1.FOR or jlp0_vax1.c (Vax emulator)
> (See also TEST_VAX2)
$ Fortran source.

# TEST_VAX2
% 6
@ Program 
& source
> To test the modules in JLP_VAX1.FOR or jlp0_vax1.c (Vax emulator)
> (See also TEST_VAX1)
$ Fortran source.

# UPPER_CASE
% 6
@ Program
& source
> To change a program from lower case to upper case (doesn't
> change the comments)
> See also LOWER_CASE
$ Fortran source.

# USMTUNED1   
% 1 
@ Program
& source
> Unsharp masking tuned in the centre to suppress the black spot.
> From Bill Sparks
$ Fortran source.

# UVCOVERAGE
% 7
@ Program
& source
> To compute the uv coverage of an array of telescopes (VLT, or
> interferometric applications).
$ Fortran source.

# WRITEFILE 
% 4
@ Program 
& source
> To write a unidimensional free format file.
$ Fortran source.

# WRITE_COMMENTS         
% 4 	
@ Program 
& source
> To read the comments of a 2-D image file and write new ones. 
$ Fortran source.

# XYCURA1  
% 5
@ Program 
& source
> To get positions of the cursor on the ARGS.
> Derived from XYCURA (EDRS), but the output is in free format, and the exit is
> done by pressing twice on the red button
> This program is designed to enter the shell positions : enter a series
> of points by pressing on the green button, then press  on the red one once
> (the program will create a position -1000.,-1000.) and enter the positions
> for the next shell,... To exit simply press twice on the red button.
$ Fortran source.

# XYFIT1
% 1
@ Program
& source
> Works out the coefficients of a linear transformation existing bewteen
> two sets of star positions coming from two different images (in the
> alignment procedure). In input need the positions of the stars in a format 
> similar to the one used by "PATCH1" : x, y, idiam (needs the diameter 
> to match the two input lists together)
> From XYFIT EDRS routine
$ Fortran source.

# ZEROPOINT
% 2
@ Program 
& source
> To get the zero point and the sky level of an image of 
> a galaxy, when photoelectric measurements in different circular 
> apertures are available. Input : profile of the galaxy, and 
> photoelectric measurements. Possibility of reading
> these measurements directly in the catalogue SHELL.CAT.

=================================================================
==
== hrsa: Haute Resolution spatiale
==
=================================================================
# BISP_NORM
% 7 
@ Program 
& hrsa 
> To normalize bispectrum files. 
$ Fortran source.

# BISP_DIVIDE
% 7 
@ Program 
& hrsa 
> To divide two bispectrum files (i.e. subtraction of the phases). 
$ Fortran source.

# BISPECT
% 7 	
@ Program 
& hrsa 
> Computes the spectrum and bispectrum of an image (for simulations)
$ Fortran source.

# BUTTERW
% 3 	
@ Program 
& hrsa 
> Butterworth filter of Fourier transforms (centered).
$ Fortran source.

# D_ACTUAL
% 7 	
@ Program 
& hrsa 
> To actualize logical names for DIANE (no longer used with MIDAS)
$ Fortran source.

# D_CGRADIENT
% 7 	
@ Program 
& hrsa 
> Image reconstruction by application of conjugate gradients
$ Fortran source.

# D_ERREUR
% 7 	
@ Program 
& hrsa 
> Computation of the error terms which will be used by D_CGRADIENT
$ Fortran source.

# D_FTM
% 7 	
@ Program 
& hrsa 
> Computation and normalization of the TFM, from the impulsive response
$ Fortran source.

# D_LISSAGE
% 7 	
@ Program 
& hrsa 
> Regularisation of the problem
$ Fortran source.

# D_REPONS
% 7 	
@ Program 
& hrsa 
> To create an artificial impulsive response
$ Fortran source.

# D_SNR
% 7 	
@ Program 
& hrsa 
> To compute the SNR in Fourier space when SNR in direct space is known
$ Fortran source.

# DECODE_MAMA
% 7 	
@ Program 
& hrsa 
> Reads the file created by READ_MAMA, and computes the mean spectrum,
> bispectrum, spectral ratio of a speckle integration.
$ Fortran source.

# FFT2
% 3 	
@ Program 
& hrsa 
> To compute FFT and inverse FFT (uses NAG routines).
$ Fortran source.

# INV_BISPEC
% 7 	
@ Program 
& hrsa 
> To recover phase information from bipsectrum. Uses A. Lannes' algorithm.
> For real data or simulations.
$ Fortran source.

# JLP_BISPEC1
% 7 	
@ Set of subroutines
& hrsa 
> Called by DECODE_MAMA and BISPECT. Computes the spectrum and bispectrum.
$ Fortran source.

# JLP_COVER
% 7 	
@ Set of subroutines
& hrsa 
> Computes the parameters and coefficients of a compact pupil (uv coverage).
> Called by INV_BISPEC and DECODE_MAMA.
$ Fortran source.

# OBJET
% 7 	
@ Program 
& hrsa 
> To create an image for simulations with INV_BISPEC.
$ Fortran source.

# PLOT_UV
% 7 	
@ Program 
& hrsa 
> To plot uv coverage (for a single pupil configuration)
$ Fortran source.

# READ_MAMA
% 7 	
@ Program 
& hrsa 
> To read a tape in the ESO/MAMA format. Reads speckle and direct integration
> images. Should use DECODE_MAMA after this stage to go further in the data
> reduction.
$ Fortran source.

# SNR_BISPEC
% 7 	
@ Program 
& hrsa 
> To compute SNR of the bispectrum list.
$ Fortran source.

# SNR_SPEC
% 7 	
@ Program 
& hrsa 
> To compute SNR of a spectrum
$ Fortran source.

=================================================================
==
== sourcc: C langage 
==
=================================================================

# ABSP1
% 8 	
@ Program 
& sourcc 
> To compute atmospheric absorption and position of Risley prisms
$ C source.

# BINARY
% 8 	
@ Program 
& sourcc 
> To compute the ephemerids of a double star
> References: Danjon, Astronomie Generale
>             Ephemerides du Bureau des longitudes
>             Couteau, Observation des etoiles doubles
$ C source.

# COORD 
% 8 	
@ Program 
& sourcc 
> To compute the coordinates of asteroids.
> Read orbit parameters in file "eph_asteroids.dat1"
$ C source.

# CORDISTO 
% 6 	
@ Program 
& sourcc 
> To correct distorsion of CP40 camera
> Fits a 3rd order polynomial to x and y coordinates
$ C source.

# CTAPE
% 4 	
@ Program 
& sourcc 
> To control a tape driver
$ C source.

# MAGNI_TO_PHOTONS 
% 6 	
@ Program 
& sourcc 
> To convert magnitude to flux in photons/second
$ C source.

# OPTIC_MATRIX 
% 6 	
@ Program 
& sourcc 
> Work with optical matrices, display rays.
$ C source.

# RCAR 
% 4 	
@ Program 
& sourcc 
> Read CAR format (from "tar" written by a Macintosh)
$ C source.

# RCP40
% 4 	
@ Program 
& sourcc 
> Read CP40 format
$ C source.

# RISL2 
% 8 	
@ Program 
& sourcc 
> To compute chromatic aberration of the speckle camera
> and position of Risley prisms
$ C source.

# RTIFF 
% 4
@ Program 
& sourcc 
> To read TIFF format (from Macintosh).
$ C source.

# WAVEFRONT1
% 6
@ Program 
& sourcc 
> To analyse wavefront in Perez' experiment (gradient, laplacian...)
$ C source.

# XDISP1
% 5
@ Program
& splot
> To display an image on an X11 terminal 
> USAGE:
> Xdisp1 input_file [lower_threshold,upper_threshold] [number_of_colors] [max_size]
> Example: Xdisp1 in 0,0 64 800     (0,0: min, max automatic scale)
> Example: Xdisp1 in 1,1 32 800     (1,1: automatic high contrasted scale) 
> Example: Xdisp1 in 0.5,10.1      (0.5,10.1 scale, 64 colors, 600 max_size) 
> Put negative number of colors to use TeX fonts...
$ C source.

