C++*******************************************************************
C Catalogue of JLP subroutines (in JLPSUB)
C Convention:
C 1 : 2-D image processing
C 2 : Processing of profiles, spectra (1-D)
C 3 : Modelling/mathematics
C 4 : Format conversion, access to various format
C 5 : Graphics
C 6 : Miscellaneous
C 7 : HRS programs (speckle)
C 8 : Celestial mechanics/atmospheric dispersion
C
C JLP
C Version 05-07-94
C--*********************************************************************

# ARGS_DISPLAY         
% 5 
@ Set of subroutines 
& jlpsub
> To display a curve XPLOT, YPLOT on the ARGS. Different colours are 
> available. Each colour is associated with a different overlay plane.
$ Fortran source

# ARITHM_SET     
% 1
@ Set of subroutines
& jlpsub
> To perform arithmetic operations on BDF files :
>       + constant, - constant, * constant, / constant,
>       addition, subtraction of two files
> Used by ARITHM and ARITHM_DYN
$ Fortran source

# AUTO_SKY        
% 1 
@ Subroutine 
& jlpsub
> Determines the sky level and the noise in the 4 corners of the image. 
> Called by AUTO_SCALE, FITELLI, GRADIENT1 and PATCH1
$ Fortran source

# BADCOLUMN     
% 1 
@ Set of subroutines 
& jlpsub
> To correct bad columns on CCD frames. Used by CCDCLEAN
$ Fortran source

# BELL
% 6 	
@ Subroutine
& jlpsub
> To produce a "bell" warning (beep).
> Syntax:  CALL BELL
$ Fortran source

# CEL_MECA1
% 8 	
@ Set of routines 
& sourcc 
> Set of routines about celestial mechanics.
> To compute atmospheric absorption
> and position of Risley prisms
$ C source

# CHEBYFIT 
% 3
@ Set of subroutines 
& jlpsub
> To fit a Chebycheff polynomial. In input the real*8 array X
> can be now in any order (it is internally sorted into ascending order). 
> For real*8 arrays only. After this fit use CALCHEBY to compute
> the value Y at a given point X.
$ Fortran source

# CIRCPHOT_SET
% 1 
@ Set of subroutines 
& jlpsub
> To perform circular aperture photometry 
> and display the corresponding circles. 
> Called by XDISP1.
> Contains: CIRCPHOT
$ Fortran source

# CONTOUR_SET 
% 1
@ Set of subroutines 
& jlpsub
> Finds the contours in an image at a given level.
> Possibility of selecting the longest closed contour (like in FITELLI)
> or determining the central position and the maximum diameter of each
> contour (like in REMSTAR).
> Called by FITELLI and REMSTAR
> Contains: GGROPE, GGROPE1, SAVAGE, BBBONE, ZAPATA.
$ Fortran source

# DISPLAY1 
% 5
@ Subroutine 
& jlpsub
> To display one curve with two input arrays X,Y 
> Possibility of entering points with the cursor.
> Calls NEWPLOT
>
> Syntax :
> CALL DISPLAY1(X,Y,NSTART,NEND,XOUT,YOUT,NOUT,CHAR1,CHAR2,TITLE,PLOTDEV)
$ Fortran source

# DISPLAY2 
% 5
@ Subroutine 
& jlpsub
> To display two curves with four input arrays X1,Y1,X2,Y2
> Calls NEWPLOT.
>
> Syntax :
> CALL DISPLAY2(X1,Y1,N1START,N1END,X2,Y2,N2START,N2END,
>                         CHAR1,CHAR2,TITLE,PLOTDEV,NCHAR1,NCHAR2)
$ Fortran source

# EFIT
% 1	
@ Set of subroutines 
& jlpsub
> To fit an ellipse to a curve X,Y. Possibility of fixed or moving centre.
> Calls NAG routine E04HFF with second derivatives.
> Computes Fourier coefficients.
> Output of results in file 9.
> Called by EFIT6, FITOU and FITELLI.
$ Fortran source

# ELPLOT
% 5	
@ Subroutine 
& jlpsub
> To display the contours and the fitted ellipses reading
> the output graphic files generated by FITELLI. 
> (From Dave Carter)
$ Fortran source

# ERIC_FORMAT 
% 4
@ Set of subroutines 
& jlpsub0
> Read/write routines to access Eric Anterrieu's 2-D images.
> (int)nx,(int)ny,(float)data array
> JLP_FORMAT=9
$ C source

# GENE_ELLIPSE  
% 3
@ Subroutine 
& jlpsub
> To generate a portion of an ellipse in two arrays X,Y.
> Called by FITELLI, EFIT6, SHELL_PROC, READ_FIT... Compatible with EFIT.
$ Fortran source

# GRAPHIC.KER
% 5
@ Document 
& jlpsub
> To set default window parameters for graphic devices (physical parameters)  
$ Fortran source

# GRICOM
% 5 
@ Common block 
& jlpsub
> Used by GRINNEL and GRI_ELLI
$ Fortran source

# GRI_SET
% 5 
@ Set of subroutines 
& jlpsub
> Modules used by GRI_ELLI and GRINNEL
> Contains :
> LUT_1, ROW_GRINNEL, PATCH2, STRDELT, STRCOPY, GRINNEL_VECTOR,
> GRINNEL_INIT, GRINNEL_CIRCLE 
$ Fortran source

# INSPECT_IMAGE
% 1
@ Set of subroutines
& jlpsub
> To perform operations on a file
> Computes mean, sigma, print some values or displays a line or a column.
> Called by CHECKFILE
$ Fortran source

# ISOPHOTE_SET
% 5
@ Set of subroutines
& jlpsub
> To draw with SPLOT graphic package
> Contains : TRAC, TRAC1, LIRE11, FRAME
$ Fortran source

# JLP0_ACC_MIDAS 
% 4
@ Set of subroutines 
& jlpsub0
> To read and write MIDAS 2-D image files
> JLP_FORMAT=5
$ C source

# JLP0_AC_VAX
% 4
@ Set of subroutines
& jlpsub0
> To replace JLP VAX-dependent input/output routines
> which access 2-D images in CCD, BDF, and CDCA format
> (i.e., which are only C valid on the Vax system) by dummy routines.
> Contains:
>  JLP_RDICCD, JLP_RDCCD, JLP_RDIBDF, JLP_RDRBDF, JLP_RDCDCA, JLP_WRCDCA,
>  JLP_WRICCD, JLP_WRCCD, JLP_WRIBDF, JLP_WRRBDF, JLP_VM_RDICCD, JLP_VM_RDCCD,
>  JLP_VM_RDBDF, JLP_VM_RDIBDF, MTACCESS
$ Fortran source

# JLP0_OSD
% 4
@ Set of subroutines 
& jlpsub0
> Routines to access C files from Fortran programs (only).
> (Fortran interface to osd.c, in oslib.a)
> Use "test_osd.for" for debugging...
$ C source

# JLP0_RDFITS
% 4
@ Set of subroutines 
& jlpsub0
> To read FITS formatted 1-D, 2-D, and 3-D image files
> Formats supported are : FITS 8,16,32,-32,-64 (JLP_FORMAT=7 or 8) 
> (i.e. 1-byte, 2-byte or 4-byte integer, and 4-byte or 8-byte float values)
> JLP comments and jlp_descriptors
$ C source

# JLP0_UNIX1
% 4
@ Set of subroutines 
& jlpsub0
> To get and free virtual memory and emulate some basic VAX routines
> Called by jlp0_vax1.for
$ C source

# JLP0_VAX1
% 4
@ Set of subroutines
& jlpsub
> To emulate VAX/VMS extensions on UNIX system by calling interface 
> with C routines. Replaces JLP_VAX1 which is for VMS/VAX.
> Contains: 
> JLP_GETVM, JLP_FREEVM, JLP_DO_COMMAND, JLP_INIT_TIMER, JLP_SHOW_TIMER,
> JLP_DATE_TIME, JLP_GET_SYMBOL, JLP_SET_SYMBOL, JLP_DIRECTORY, 
> JLP_CLI_PRESENT, JLP_CLI_GET_VALUE
$ Fortran source

# JLP0_WRFITS
% 4
@ Set of subroutines 
& jlpsub0
> To write FITS formatted 2-D image files
> Formats supported are : FITS 32,-32 
> i.e., 4-byte integer (JLP_FORMAT=7) or 4-byte float values (JLP_FORMAT=8)
> JLP comments and jlp_descriptors
$ C source

# JLP_ACCESS
% 4
@ Set of subroutines
& jlpsub
> To access real*4/integer*2 CCD, Starlink BDF, MIDAS, CDCA and FITS images
> Any calling program should first call JLP_INQUIFMT to enquire the
> format of the input/ouput files.
> If NAME.EQ.' ' then JLP_READIMAG or JLP_WRITEIMAG prompts for the name
> The comments are assumed to be shorter than 80 characters.
>
> Contains:  JLP_INQUIFMT, JLP_BEGIN, JLP_END
>  JLP_READIMAG, JLP_WRITEIMAG,
>  JLP_VM_READIMAG, JLP_CHECK_ASCII, JLP_WDESCR, JLP_RDESCR
>  JLP_FROM_MADRID
$ Fortran source

# JLP_AC_CCD
% 4
@ Set of subroutines
& jlpsub
> To read and write integer*2/real*4 CCD files with images 
> declared as (IDIM,IDIM) in the calling program.
>
> Contains: JLP_RDCCD, JLP_RDICCD, JLP_WRCCD, JLP_WRICCD,
>   JLP_VM_RDCCD, JLP_VM_RDICCD, JLP_VM_RDCCD1, JLP_VM_RDICCD1
$ Fortran source

# JLP_AC_CDCA
% 4
@ Set of subroutines
& jlpsub
> To read integer*2 CDCA files with images 
> declared as (IDIM,IDIM) in the calling program.
>
> Contains : JLP_RDCDCA, JLP_CDCALINE, JLP_OPENCDCA
> JLP_WRCDCA, JLPI_WRITECDCA, JLP_WRHEADER_CDCA
> JLP_VM_RDCDCA
$ Fortran source

# JLP_AC_STARLINK
% 4
@ Set of subroutines
& jlpsub
> To read and write integer*2/real*4 Starlink BDF image files
> Needs JLP_INTERIM routines
> Contains: JLP_RDIBDF,  JLP_WRIBDF, JLP_WRRBDF, JLP_WRRBDF1,
>      JLP_VM_RDBDF, JLP_VM_RDIBDF, JLP_VM_RDIBDF1
$ Fortran source

# JLP_AUTO_SCALE
% 1 
@ Subroutine 
& jlpsub
> Determines the mean and sigma of the whole image.
> Called by AUTO_SCALE
$ Fortran source

# JLP_DIRECTORY
% 6
@ Set of subroutines
& jlpsub
> To generate lists of files from input names with wild cards
> Called by FITS_READ and FITS_WRITE
$ Fortran source

# JLP_GRAPHIC_HELP
% 5
@ Format 
& jlpsub
> Format in standard Fortran to display help message on:
>    - available graphic devices (label 3333). 
>    - available symbols for curves (label 3334). 
$ Fortran source

# JLP_INTERIM
% 4
@ Set of subroutines
& jlpsub
> New version of INTERIM (Starlink) routines to allow the user not to use
> connection files for entering images, and to enter directly
> the names of the input/output files.
> (Nota : RDDATA and WRDATA have been included in RDIMAG and WRIMAG)
> Used by JLP_ACC_STARLINK
> Contains :
> JLP_RDIMAG, JLP_WRIMAG, JLP_ACCFRM, JLP_GETPPI, JLP_WRFRM
$ Fortran source

# JLP_RANDOM
% 3
@ Set of subroutines 
& jlpsub0
> To generate pseudo-random series of numbers.
$ C source

# JLP0_RDTABLE
% 4
@ Set of subroutines
& jlpsub0
> To read Midas tables and spectra (1-D image)
> Contains: JLP_RDTABLE, JLP_RDSPEC, JLP_TRANMI
$ Fortran source

# JLP_SYSTEM
% 6
@ Set of subroutines 
& jlpsub0
> To substitute "system" routine when not available...
> Remember: system(command) send the command to the underlying shell..
$ C source

# JLP_UPCASE
% 6
@ Subroutine
& jlpsub
> To convert a word to uppper case.
> Syntax: 
> CALL JLP_UPCASE(WORD,WORD_LENGTH) 
$ Fortran source

# JLP_VAX1
% 4
@ Set of subroutines
& jlpsub
> To emulate VAX/VMS extensions on UNIX system.
> Interface with C routines.
> Same as JLP0_VAX1 which is for UNIX.
> Contains: JLP_GETVM, JLP_FREEVM, JLP_DO_COMMAND,
>    JLP_INIT_TIMER, JLP_SHOW_TIMER, JLP_DATE_TIME, JLP_GET_SYMBOL,
>    JLP_SET_SYMBOL,
>    JLP_DIRECTORY, JLP_CLI_PRESENT, JLP_CLI_GET_VALUE
$ Fortran source

# KARIM_FORMAT 
% 4
@ Set of subroutines 
& jlpsub0
> Read/write routines to access Karim Bouyoucef's 2-D images.
> JLP_FORMAT=10
$ C source

# KING_MODEL 
% 3
@ Set of subroutines 
& jlpsub
> To compute King's model (1966). Called by PERIOD, and KING1
$ Fortran source

# MTACCESS
% 4 
@ Subroutine 
& jlpsub
> To control a tape driver 
> similar to BANDAX, but for VAX system.
$ Fortran source

# MONGO_SYMBOL
% 5
@ Subroutine
& jlpsub
> Routine for encoding "standard JLP symbols" to MONGO symbols 
> Called by MONGO plotting routines:
>      NEWPLOT_MONGO_GKS, NEWPLOT_MONGO87 and NEWPLOT0_SMGO. 
$ Fortran source

# NEWPLOT_MONGO_GKS
% 5
@ Subroutine
& jlpsub
> Routine to draw multiple curves with GKS Mongo (Stromlo...)
> Called by NEWPLOT when GKS/MONGO is selected.
> Warning : this set of routines has (?) to be linked with M_MONGO, where
> AXIS, BOX, LINE, TICKSLABEL, TICKS,... have been changed 
> into M_AXIS, M_BOX,...
> Output to any GKS station (including laserprinter).
> Contains:  MONGO_PLOT
$ Fortran source

# NEWPLOT_MONGO87
% 5
@ Set of subroutines
& jlpsub
> Routine to draw multiple curves with Mongo Version87
> Called by NEWPLOT when MONGO87 is selected.
> Output to any Mongo station.
> Contains: MGO_PLOT, JLP_MGOINIT
$ Fortran source

# NEWPLOT_PGPLOT
% 5
@ Set of subroutines
& jlpsub
> Routine to draw multiple curves with PGPLOT 
> Called by NEWPLOT when PGPLOT is selected.
> Output to any PGPLOT station.
> Contains: PGPLOT
$ Fortran source

# NEWPLOT0_SET1             
% 5
@ Set of subroutines
& jlpsub0
> NEWPLOT is the main subroutine of this set.
>  - It displays curves X,Y with SPLOT (X11 and Postscript) 
>  - Possibility of interactive mode if suitable device is selected.
>  - Possibility of drawing error bars (in Y only)
>
> The first symbol of the device name selects the software to be used :
> -- '&xterm', '&postscript', '&square', '&tektro' selects SPLOT package
> -- '$TEKTRO' or '$FILE' selects STROMLO package
> -- '*device/type' (ex '*TXA1:/TEKTRONIX' or '*GRA0:/GRINNEL') selects the 
> PGPLOT package.
>
> WARNING: On this UNIX version, only SPLOT package is available!
>
> The symbols available for each package are described in SYMBOLS.DOC
> Reads default physical values for the graphic window in file
> "$(EXEC)/graphic0.ker"
>
> Contains:
> NEWPLOT, NEWPLOT_ERROR, NEWPLOT0, WINDOW_LIMITS
>
> An older version (NEWPLOT_SET1) works on the VAX with STROMLO, 
> MONGO/GKS (Manchester 87), MONGO/AGL, MONGO/TONRY (MGO) and PGPLOT.
$ Fortran source

# NEWPLOT_SET1_OLD             
% 5
@ Set of subroutines
& jlpsub
> NEWPLOT is the main subroutine of this set.
>  - Display curves X,Y 
>  - Possibility of interactive mode if suitable device is selected.
>  - Possibility of drawing error bars (in Y only)
>
> The first symbol of the device name selects the software to be used :
> -- '$TEKTRO' or '$FILE' selects STROMLO package
> -- '*device/type' (ex '*TXA1:/TEKTRONIX' or '*GRA0:/GRINNEL') selects the 
> PGPLOT package.
>
> This old version works on the VAX with STROMLO, 
> MONGO/GKS (Manchester 87), MONGO/AGL, MONGO/TONRY (MGO) and PGPLOT.
> A more recent version works on UNIX systems: NEWPLOT0_SET1.
$ Fortran source


# NEWPLOT0_SET2             
% 5
@ Set of subroutines
& jlpsub0
> Modules used by NEWPLOT for general purpose.
>
> Contains: ARRONDI, NEWSCALE, NEWSCALE_ERROR, 
> INDEX_MAX4, INDEX_MAX8, DECODE_SYMBOL
$ Fortran source

# NEWPLOT0_SMGO
% 5
@ Subroutine
& jlpsub0
> Subroutine SMGO_PLOT using Super Mongo package (Version 1990) 
> to draw curves, error bars, etc.
> To be called by NEWPLOT
$ Fortran source

# PATCH_SET
% 1
@ Set of subroutines
& jlpsub
> Polynomial fitting routines used to "patch" a star or cosmetic defect. 
> Written in fortran IV...
> Maximum order is 3 for the bidimensional polynomial.
> Completes PATCH2_SET for least-squares.
> Contains: NEQSOL,REJECT, and POLY.
$ Fortran source

# PATCH2_SET
% 1
@ Set of subroutines
& jlpsub
> Polynomial fitting routines used to "patch" a star or cosmetic defect. 
> Maximum order is 3 for the bidimensional polynomial.
> Displays the corrected patch.
> Uses fitting routines of PATCH_SET.
> Called by XDISP1, PATCH1.
> Contains: PATCH2, STRDELT, STRCOPY, STRESTO.
$ Fortran source

# PLAGAL_SET      
% 1   
@ Set of subroutines
& jlpsub
> To remove the galaxy in an image
> Called by "PLAGAL" and "PLAGAL_BATCH"
> Contains :
> PLAGAL1, EQUIV_RADIUS, INDEX_MAX4, INDEX_MAX8
$ Fortran source

# POLAR_DEG         
% 6 	
@ Subroutine 
& jlpsub
> To compute polar coordinates RADIUS, ANGLE(DEGREES) from X,Y coordinates.
$ Fortran source

# POLYFIT     
% 3
@ Set of subroutines 
& jlpsub
> To fit a polynomial to a set of points X,Y. Output:
> array of coeff. XC(KDEGREE+1) in real*8. Possibility of calculating
> a value with this polynomial with CALPOLY.
> Least-square method, inversion of normal matrix with pivotal method.
> Contains:
> TEST_POLYFIT, POLYFIT, PREPPW, INVMAT, INTERCH, CALPOLY
$ Fortran source

# POLYFIT1     
% 3
@ Set of subroutines 
& jlpsub
> To fit a polynomial to a set of points X,Y. Output:
> array of coeff. XC(KDEGREE+1) in real*8. Possibility of calculating
> a value with this polynomial with CALPOLY.
> 
> This subroutine calls the NAG Library routine E04HFF which uses
> a modified Gauss-Newton algorithm for finding an unconstrained minima
> of a sum of squares of M non-linear functions in N variables (M >= N).
>
> Contains:
> POLYFIT1, LSFUN2, LSHES2, ERROR_POLYFIT, CALPOLY
$ Fortran source

# POLYFIT2    
% 3
@ Set of subroutines 
& jlpsub
> Same as POLYFIT1.FOR but with E04HEF. Allows different names than
> LSFUN2 and LSHES2 (and avoid conflicts with other NAG routines)
>
> To fit a polynomial to a set of points X,Y. Output:
> array of coeff. XC(KDEGREE+1) in real*8. Possibility of calculating
> a value with this polynomial with CALPOLY.
> 
> This subroutine calls the NAG Library routine E04HEF which uses
> a modified Gauss-Newton algorithm for finding an unconstrained minima
> of a sum of squares of M non-linear functions in N variables (M >= N).
>
> Contains:
> POLYFIT2, LSQFUN, LSQHES, ERROR_POLYFIT, CALPOLY
$ Fortran source

# PROFILE_SET
% 2
@ Set of subroutines 
& jlpsub
C Routines to compute profiles of 2-D images.
> Used by PROFILE1, and PROFILE_QUICK
> Contains : MASK_MEAN, ANGLED, READ_PARAM, OUTPUT_RESULTS, UTILITIES
$ Fortran source

# PROJECT 
% 2
@ Set of subroutines 
& jlpsub
> Routines used by KING1 and HUBBLE. Includes BROADEN
> (to broaden a profile and take into account the seeing effects),
> PROJECT_ABEL (Abel projection), STORE_GRAPH, SPLINELOGFIT and SPLINEFIT.
$ Fortran source

# READFILE 
% 4
@ Subroutine 
& jlpsub
> To read 1-D files with one or two curves. Format of the input files:
>  - 2 columns X, Y
>  - 3 columns X, Y1, Y2
>  - profile from program "PROFILE1"
>  - XYCURA
>  - 2 curves NPOINTS,XY
>  - from "GRINNEL"
>
> Contains:
>  DREADFILE, READFILE, READ_ASCII
>
> (RREADFILE is for REAL*4 output, DREADFILE for REAL*8 output)
> Nota : this subroutine exists also in "GENERIC" version : READFILE.GEN
$ Fortran source

# RECENT_FFT 
% 3 	
@ Set of routines 
& sourcc 
> To recentre FFT
> and switch from zero frequency at (0,0) to (nx/2,ny/2) or inversely
> and position of Risley prisms
$ C source

# RISLEY
% 8 	
@ Set of routines 
& sourcc 
> Set of routines about celestial mechanics.
> To compute atmospheric absorption and position of Risley prisms
> for the speckle camera at the TBL
$ C source

# SEARCH_SET
% 2
@ Subroutine 
& jlpsub
> To look for a word in a character array.
> Used by HELP_JLP.
>
> Contains SEARCH, SEARCH1, CLASS, ASCII_REAL, RD_CORREL1, RD_CORREL2
$ Fortran source

# SMOOTH2
% 1
@ Subroutine
& jlpsub
> Smoothing routine with a grid ("Top Hat", gaussian, or imposed by
> the user). Possibility of unsharp masking. 
> Called by SMOOTH1.
$ Fortran source

# SORT_SET
% 2
@ Set of subroutines 
& jlpsub
> To sort integer, real and character 1-D arrays.
> OPTION: 'A' for ascending, 'D' for descending order.
> Contains: SORT_REAL4, SORT_REAL8, SORT_INT4, SORT_CHAR
$ Fortran source

# STARFIT_SET
% 1
@ Set of subroutines 
& jlpsub
> To fit a model of a star model (ellipses and gaussian profile) 
> Extracted from EDRSLIB. Used by STARFIT1 (extracted from EDRSLIB).
> Contains: CLNSTA, GAUFIT, ELLIPS, WMODE, PRFFIT, MODE, NTHMIN
$ Fortran source

# STR
% 5 
@ Set of subroutines 
& jlpsub
> Fortran interface with graphic routines of SPLOT. 
> Works in user coordinates.
> Contains: STR_PLOT, STR_SYMBOL, STR_CIRCLE, STR_IMAGE
$ Fortran source

# ST_DAT.INC
% 4
@ Include file
& jlpsub
> Include file for MIDAS with definition of parameters(in VAX/VMS)
$ Fortran source

# ST_DEF.INC
% 4
@ Include file
& jlpsub
> Include file for MIDAS with declarations of variables (in VAX/VMS)
$ Fortran source
