C++************************************************************************
C
C Program to set up initial conditions for shell simulations.
C
C Isotropic galaxy and isotropic companion
C
C From Peter Quinn Sept. 1987
C
C************************************************************************
C Notes to use these programs:
C
C Check audit.dat generated by EVOLVE_CLUSTER. If the energy is not
C constant take a smaller step.
C
C In February-May 1988:
C Sigma_cluster    = 200
C Rcore_cluster    = 2
C Rtidal_cluster   = 30
C Mass_galaxy      = 1.E+08
C Re_galaxy        = 4
C Initial_distance = 20
C Ellipse
C Fraction of circular energy = 1.E-10
C Number of particles  = 20000
C
C--************************************************************************
 
	PROGRAM SETUP_CLUSTER
	PARAMETER (G=1.,unit_vel=976.6,unit_mass=2.217e+11)
C (Quinn' extent=10.)
        PARAMETER (max_bodies=20000,extent=3.)
 
	DIMENSION xp(max_bodies),yp(max_bodies),zp(max_bodies)
	DIMENSION vxp(max_bodies),vyp(max_bodies),vzp(max_bodies)
	DIMENSION pmass(max_bodies),header(128)
 
	LOGICAL is_member
 
	REAL lum_mass_member,lum_mass_comp
 
        CHARACTER*1 orbit_type,ans4
	CHARACTER*40 params_file,model_file
 
	params_file = 'params'
	model_file = 'model'
 
	PRINT *,' '
	PRINT *,'setup>> Cluster initial conditions set up program <<'
	PRINT *,' '
 
	WRITE(6,1)
   1	FORMAT(1x,'setup>> Supply : Cluster velocity dispersion : ',$)
	READ(5,*)sigma_cluster
	WRITE(6,2)
   2	FORMAT(1x,'setup>>          Cluster core radius         : ',$)
	READ(5,*)core_radius_cluster
	WRITE(6,3)
   3	FORMAT(1x,'setup>>          Cluster outer radius        : ',$)
	READ(5,*)outer_radius_cluster
 
        pi=2.*asin(1.)
	sigma_cluster_scaled=sigma_cluster/unit_vel
	rho_0_cluster=(sigma_cluster_scaled**2)/
     &                (2.*pi*G*core_radius_cluster**2)
	ratio2=outer_radius_cluster/core_radius_cluster
	total_mass_cluster=4.*pi*rho_0_cluster*core_radius_cluster**3*
     &                     (ratio2-atan(ratio2))
        total_mass_scaled=total_mass_cluster*unit_mass
	PRINT *,'setup>---> Total cluster mass : ',total_mass_scaled
 
        PRINT *,' '
C	WRITE(6,4)
   4	FORMAT(1x,'setup>> Do you want a cluster member as well (y/n)? :',$)
	READ(5,5)ans4
   5	FORMAT(a1)
	IF(ans4.eq.'y'.or.ans4.eq.'Y')THEN
             is_member=.true.
	   ELSE
	     is_member=.false.
	   ENDIF	
 
	IF(is_member)THEN
	     PRINT *,' '
	     WRITE(6,6)
   6         FORMAT(1x,'setup>> Supply the member position (x,y,z) : ',$)
	     READ(5,*)x_member,y_member,z_member
	     WRITE(6,7)
   7	     FORMAT(1x,'setup>>            member luminous mass    : ',$)
             READ(5,*)lum_mass_member
             WRITE(6,8)
   8         FORMAT(1x,'setup>>            member half-light radius: ',$)
	     READ(5,*)re_member
	   ELSE
	     x_member=0.
	     y_member=0.
	     z_member=0.
	     re_member=0.
	     lum_mass_member=0.
	   ENDIF
 
	PRINT *,' '
 
	WRITE(6,9)
   9	FORMAT(1x,'setup>> Supply the companion luminous mass : ',$)
	READ(5,*)lum_mass_comp
	WRITE(6,10)
  10	FORMAT(1x,'setup>> Companion half-light radius  : ',$)
	READ(5,*)re_comp
	WRITE(6,11)
  11	FORMAT(1x,'setup>> Distance of the companion',
     1	'from the centre of the galaxy: ',$)
	READ(5,*)r_comp
 
	IF(r_comp.ge.outer_radius_cluster)THEN
	     contained_cluster_mass=total_mass_cluster
           ELSE
             ratio1=r_comp/core_radius_cluster
	     contained_cluster_mass=4.*pi*rho_0_cluster*
     1	core_radius_cluster**3*(ratio1-atan(ratio1))
	   ENDIF
	contained_mass=contained_cluster_mass*unit_mass
	PRINT *,'setup>---> Cluster mass inside radius : ',contained_mass
 
	PRINT *,' '
	WRITE(6,12)
  12	FORMAT(1x,'setup>> Companion orbit : c,p,e : ? : ',$)
	READ(5,5)orbit_type
	IF(orbit_type.eq.'e')THEN
	     WRITE(6,13)
  13	     FORMAT(1x,'setup>> fraction of circular energy : ',$)
	     READ(5,*)e_fraction
	   ELSEIF(orbit_type.eq.'p')THEN
	     WRITE(6,20)
  20         FORMAT(1x,'setup>> approximate peri-distance : ',$)
	     READ(5,*)peri_distance
 	   ENDIF
 
	PRINT *,' '
	WRITE(6,14)
  14	FORMAT(1x,'setup>> Number of particles in companion: ',$)
	READ(5,*)nbodies
 
	PRINT *,' '
	PRINT *,'setup>> Beginning Setup << '
 
C	CALL gen_comp_halo(nbodies,re_comp,lum_mass_comp,
C    &                  gamma_halo,extent,xp,yp,zp,vxp,vyp,vzp)
	CALL gen_comp(nbodies,re_comp,lum_mass_comp,
     &                  gamma_halo,extent,xp,yp,zp,vxp,vyp,vzp)
 
	header(1)=nbodies
	header(2)=1
	header(3)=0
	header(6)=G
	model=1
 
C	CALL nuwrite(model,model_file,header,xp,yp,zp,vxp,vyp,vzp,
C     &               pmass)
 
	OPEN(unit=11,file=model_file,status='unknown',form='unformatted')
	WRITE(11)nbodies
C Write iteration,time
	it0=1
	time0=0.
	WRITE(11)it0,time0
	DO i=1,nbodies
	   WRITE(11)i,xp(i),yp(i),zp(i),vxp(i),vyp(i),vzp(i)
	ENDDO
	CLOSE(unit=11)
 
 	OPEN (unit=10,file=params_file,status='unknown')
	WRITE(10,*)sigma_cluster,core_radius_cluster,outer_radius_cluster
	WRITE(10,*)is_member
	WRITE(10,*)x_member,y_member,z_member
	WRITE(10,*)lum_mass_member,re_member
	WRITE(10,*)nbodies,lum_mass_comp
	WRITE(10,*)re_comp,gamma_halo,extent
        WRITE(10,*)r_comp
	WRITE(10,*)orbit_type
	WRITE(10,*)e_fraction,peri_distance
	CLOSE(unit=10)
 
	PRINT *,' '
	PRINT *,'setup>> All done <<'
	PRINT *,' '
 
	END
 
 
C***************************************************************************
C
C	Subroutine to generate the companion as a simple
C	Plummer sphere of particles in a Plummer field plus
C       a modified isothermal halo.
C
C Input :
C nbodies
C re_comp
C lum_mass_comp
C extent
C
C Output:
C gamma_halo
C xp,yp,zp
C vxp,vyp,vzp
C
C***************************************************************************
 
	SUBROUTINE gen_comp_halo(nbodies,re_comp,lum_mass_comp,
     &                        gamma_halo,extent,xp,yp,zp,vxp,vyp,vzp)
 
	PARAMETER (max_bodies=20000)
	PARAMETER (rmax_factor=3.)
 	PARAMETER (scale=3.)
	PARAMETER (G=1.,unit_vel=976.6,unit_mass=2.217e+11)
 
	DIMENSION xp(1),yp(1),zp(1)
	DIMENSION vxp(1),vyp(1),vzp(1)
	DIMENSION radius(max_bodies)
	DIMENSION potential(max_bodies)
 
	REAL lum_mass_comp,lum_mass_comp_scaled
 
	iseed=1234567
	pi=2.*asin(1.)
	rmax=rmax_factor*re_comp
 
C Random generation of the positions:
	n=0
	count=0
  10    r_3=ran(iseed)*rmax**3
        r=r_3**0.3333333
	f_r=1./(1.+(r/re_comp)**2)**2.5
	a_num=ran(iseed)
	IF(a_num.gt.f_r)GOTO 10
 
	n=n+1
	count=count+1
C Random generation of phi (0. to 2*pi)
C and theta (projection uniform between -1. and 1.)
         cos_theta=(0.5-ran(iseed))*2.
        phi=2.*pi*ran(iseed)
	sin_theta=sqrt(1.-cos_theta*cos_theta)
	radius(n)=r
	xp(n)=r*sin_theta*cos(phi)	
	yp(n)=r*sin_theta*sin(phi)
	zp(n)=r*cos_theta
	IF(mod(n,500).eq.0)THEN
	   PRINT *,'....',n
	   count=0
	   ENDIF
	IF(n.lt.nbodies)GOTO 10
 
	PRINT *,' '
	PRINT *,'gen_comp>>',nbodies,' Particles set up <<'
	
C Recentrering the centre of mass to (0,0,0)
 	CALL  cmt_x(nbodies,xp,yp,zp,radius)
 
C Computing the central velocity dispersion :
	lum_mass_comp_scaled=lum_mass_comp/unit_mass
	v_dispersion_comp=sqrt(pi*G*lum_mass_comp_scaled/
     &                          (32.*re_comp))
 
C Parameters for the halo:
	gamma_halo=scale*re_comp
	rho_0_halo=v_dispersion_comp**2/(2.*pi*G*gamma_halo**2)
	r_chi=extent*gamma_halo
	halo_mass=4.*pi*rho_0_halo*gamma_halo**3*
     &               ((r_chi/gamma_halo)-atan(r_chi/gamma_halo))
	halo_mass_unscaled=halo_mass*unit_mass
	ratio_masses=halo_mass/lum_mass_comp_scaled
	rscale=r_chi/gamma_halo
	v_dispersion_unscaled=v_dispersion_comp*unit_vel
 
	PRINT *,' '
	PRINT *,'gen_comp>---> companion velocity dispersion : ',
     &                        v_dispersion_unscaled
	PRINT *,'gen_comp>---> extent of halo around companion: ',
     &                        r_chi
	PRINT *,'gen_comp>---> total halo mass : ',halo_mass_unscaled
	PRINT *,' '
 
C Random generation of the velocities: (v_dispersion_comp)
C Initializes the Gaussian NAG random generator g05cbf:
C	 call g05cbf(0)
 
	DO i=1,nbodies
c	   IF(radius(i).gt.r_chi)THEN
c	      phi_halo=-G*halo_mass/radius(i)
c	      ELSE
c	      r1=radius(i)/gamma_halo
c	      t1=(1./r1)*atan(r1)-1.
c	      t2=0.5*alog((1.+r1*r1)/(1.+rscale*rscale))
c	      t3=halo_mass/(gamma_halo*(rscale-atan(rscale)))
c	      phi_halo=G*t3*(t2+t1)
c	      ENDIF
	    phi_comp=-G*lum_mass_comp_scaled
     &                  /sqrt((radius(i)**2+re_comp**2))
	
	    phi_total=phi_comp
C	    phi_total=phi_halo+phi_comp
	    v_total=sqrt(abs(phi_total))
 
C Gaussian NAG random generator g05ddf:
C (sigma decreasing linearily with the distance)
C	    sigma=v_dispersion_comp
C     1	*(gamma_halo-radius(i))/gamma_halo
C	    sigma=max(0.,sigma)
C	    v_total=g05ddf(dble(v_total),dble(sigma))
C!! Not necessary since there is already a dispersion in the velocities
C (from the angular random distribution)
 
	    phi=2.*pi*ran(iseed)
	    cos_theta=(0.5-ran(iseed))*2.
	    sin_theta=sqrt(1.-cos_theta**2)
	    vxp(i)=v_total*sin_theta*cos(phi)
	    vyp(i)=v_total*sin_theta*sin(phi)
	    vzp(i)=v_total*cos_theta
	    ENDDO
 
C Setting the mean velocity to (0,0,0)
	CALL cmt_v(nbodies,vxp,vyp,vzp)
 
	RETURN
	END
   	   	
 
C*************************************************************************
C
C	Subroutine to transform to center of mass coordinates
C			in space.
C
C*************************************************************************
 
	SUBROUTINE cmt_x(nbodies,xp,yp,zp,radius)
 
	DIMENSION xp(1),yp(1),zp(1),radius(1)
 
	xsum=0.
	ysum=0.
	zsum=0.
 
	DO i=1,nbodies
	   xsum=xsum+xp(i)
	   ysum=ysum+yp(i)
	   zsum=zsum+zp(i)
	   ENDDO
 
	xcm=xcm/float(nbodies)
	ycm=ycm/float(nbodies)
	zcm=zcm/float(nbodies)
 
	DO i=1,nbodies
	   xp(i)=xp(i)-xcm
	   yp(i)=yp(i)-ycm
	   zp(i)=zp(i)-zcm
	   radius(i)=sqrt(xp(i)*xp(i)+yp(i)*yp(i)+zp(i)*zp(i))
	   ENDDO
 
	PRINT *,' '
	PRINT *,'cmt_x>> CMT in x complete <<'
 
	RETURN
	END
 
C*************************************************************************
C
C	Subroutine to transform to center of mass coordinates
C			in velocity
C
C*************************************************************************
 
	SUBROUTINE cmt_v(nbodies,vxp,vyp,vzp)
 
	DIMENSION vxp(1),vyp(1),vzp(1)
 
	vxsum=0.
	vysum=0.
	vzsum=0.
 
	DO i=1,nbodies
	   vxsum=vxsum+vxp(i)
	   vysum=vysum+vyp(i)
	   vzsum=vzsum+vzp(i)
	   ENDDO
 
	vxcm=vxcm/float(nbodies)
	vycm=vycm/float(nbodies)
	vzcm=vzcm/float(nbodies)
 
	DO i=1,nbodies
	   vxp(i)=vxp(i)-vxcm
	   vyp(i)=vyp(i)-vycm
	   vzp(i)=vzp(i)-vzcm
	   ENDDO
 
	PRINT *,' '
	PRINT *,'cmt_v>> CMT in v complete <<'
	PRINT *,' '
 
	RETURN
	END
 
C*******************************************************************
C
C     A SUBROUTINE TO WRITE UNFORMATTED DATA TO A FILE
C     WHERE MORE THAN ONE RECORD CAN BE USED PER MODEL.
C     model specifies the model to be written and the particles
C     are loaded into records irecsize at a time
C
C*******************************************************************
 
C      header(1)=number particles
C      header(2)=it
C      header(3)=tt
C      header(4)=etot
C      header(5)=am
C      header(8)=g (Newton's constant)
C      header(9)=epsilon (kpc)
 
 
      SUBROUTINE nuwrite(model,infile,header,x,y,z,vx,vy,vz,pmass)
 
 
      DIMENSION X(1),Y(1),Z(1),VX(1),VY(1),VZ(1)
      DIMENSION header(1),pmass(1)
      CHARACTER*40 infile
      INTEGER extend,records
 
      PARAMETER (irecsize=128)
      PARAMETER (nobytes=1)
      PARAMETER (lu=10)
      PARAMETER (ibig=8000000)
 
c     nobytes = 8 CRAY
c     nobytes = 4 VAX UNIX
c     nobytes = 1 VAX VMS
 
c     LANL specific :
 
c     ibig is necessary for the CFT call to FAMSIZ
c     which sets the size of the direct access file in
c     words.
 
      LOGICAL tail
 
      ISIZE=(7*irecsize)*nobytes
      tail=.false.
 
      OPEN(unit=lu,file=infile,status='unknown',
     &      access='direct',recl=isize)
 
C     CALL famsiz(lu,ibig)
 
      n=header(1)
      numrec=n/irecsize + 1
      remain=(float(n)/float(irecsize)) -  n/irecsize
      IF(remain.ne.0)THEN
         numrec=numrec+1
         tail=.true.
         END IF
      ireci=(model-1)*numrec+1
      irec=ireci
      i=1
      extend=irecsize
      WRITE(lu,rec=irec)(header(j),j=1,irecsize)
      irec=irec+1
      DO 10 j=2,numrec
         IF(j.eq.numrec)THEN
            IF(tail)THEN
               extend=n-(numrec-2)*irecsize
               END IF
            END IF
         k1=i
         k2=i+extend-1
         WRITE(lu,rec=irec)(x(l),y(l),z(l),vx(l),vy(l),vz(l)
     &                  ,pmass(l),l=k1,k2)
         i=i+extend
         irec=irec+1
  10     CONTINUE
      CLOSE(unit=lu)
      IF(tail)THEN
         records=numrec-2
         WRITE(6,100)records,irecsize,extend,model,infile
 100     FORMAT(1x,'nuwrite>> Writing ',i3,'*',i4,'+',i4,
     & ' particles into model ',i3,' of file :',a40)
         ELSE
         records=numrec-1
         WRITE(6,200)records,irecsize,model,infile
 200     FORMAT(1x,'nuwrite>> Writing ',i3,'*',i4,
     & ' particles into model ',i3,' of file :',a40)
         END IF
      RETURN
      END
 
 
C***************************************************************************
C
C Subroutine to generate the companion as a simple
C	Plummer sphere of particles in a Plummer field
C
C Input :
C nbodies
C re_comp
C lum_mass_comp
C extent
C
C Output:
C gamma_halo
C xp,yp,zp
C vxp,vyp,vzp
C
C***************************************************************************
 
	SUBROUTINE gen_comp(nbodies,re_comp,lum_mass_comp,
     &                        gamma_halo,extent,xp,yp,zp,vxp,vyp,vzp)
 
	PARAMETER (max_bodies=20000)
	PARAMETER (rmax_factor=3.)
 	PARAMETER (scale=3.)
	PARAMETER (G=1.,unit_vel=976.6,unit_mass=2.217e+11)
 
	DIMENSION xp(1),yp(1),zp(1)
	DIMENSION vxp(1),vyp(1),vzp(1)
	DIMENSION radius(max_bodies)
	DIMENSION potential(max_bodies)
 
	REAL lum_mass_comp,lum_mass_comp_scaled
 
	iseed=1234567
	pi=2.*asin(1.)
	rmax=rmax_factor*re_comp
 
C Random generation of the positions:
	n=0
	count=0
  10    r_3=ran(iseed)*rmax**3
        r=r_3**0.3333333
	f_r=1./(1.+(r/re_comp)**2)**2.5
	a_num=ran(iseed)
	IF(a_num.gt.f_r)GOTO 10
 
	n=n+1
	count=count+1
C Random generation of phi (0. to 2*pi)
C and theta (projection uniform between -1. and 1.)
         cos_theta=(0.5-ran(iseed))*2.
        phi=2.*pi*ran(iseed)
	sin_theta=sqrt(1.-cos_theta*cos_theta)
	radius(n)=r
	xp(n)=r*sin_theta*cos(phi)	
	yp(n)=r*sin_theta*sin(phi)
	zp(n)=r*cos_theta
	IF(mod(n,500).eq.0)THEN
	   PRINT *,'....',n
	   count=0
	   ENDIF
	IF(n.lt.nbodies)GOTO 10
 
	PRINT *,' '
	PRINT *,'gen_plumgal>>',nbodies,' Particles set up <<'
	
C Recentrering the centre of mass to (0,0,0)
 	CALL  cmt_x(nbodies,xp,yp,zp,radius)
 
C Computing the central velocity dispersion :
	lum_mass_comp_scaled=lum_mass_comp/unit_mass
	v_dispersion_comp=sqrt(pi*G*lum_mass_comp_scaled/
     &                          (32.*re_comp))
	v_dispersion_unscaled=v_dispersion_comp*unit_vel
 
	PRINT *,' '
	PRINT *,'gen_comp>---> companion velocity dispersion : ',
     &                        v_dispersion_unscaled
 
C Random generation of the velocities: (v_dispersion_comp)
C Initializes the Gaussian NAG random generator:
C	 call g05cbf(0)
 
	DO i=1,nbodies
c	   IF(radius(i).gt.r_chi)THEN
c	      phi_halo=-G*halo_mass/radius(i)
c	      ELSE
c	      r1=radius(i)/gamma_halo
c	      t1=(1./r1)*atan(r1)-1.
c	      t2=0.5*alog((1.+r1*r1)/(1.+rscale*rscale))
c	      t3=halo_mass/(gamma_halo*(rscale-atan(rscale)))
c	      phi_halo=G*t3*(t2+t1)
c	      ENDIF
	    phi_comp=-G*lum_mass_comp_scaled
     &                  /sqrt((radius(i)**2+re_comp**2))
	
	    phi_total=phi_comp
C	    phi_total=phi_halo+phi_comp
	    v_total=sqrt(abs(phi_total))
 
C Gaussian NAG random generator :
C (sigma decreasing linearily with the distance)
C	    sigma=v_dispersion_comp
C     1	*(gamma_halo-radius(i))/gamma_halo
C	    sigma=max(0.,sigma)
C	    v_total=g05ddf(dble(v_total),dble(sigma))
C!! Not necessary since there is already a dispersion in the velocities
C (from the angular random distribution)
 
	    phi=2.*pi*ran(iseed)
	    cos_theta=(0.5-ran(iseed))*2.
	    sin_theta=sqrt(1.-cos_theta**2)
	    vxp(i)=v_total*sin_theta*cos(phi)
	    vyp(i)=v_total*sin_theta*sin(phi)
	    vzp(i)=v_total*cos_theta
	    ENDDO
 
C Setting the mean velocity to (0,0,0)
	CALL cmt_v(nbodies,vxp,vyp,vzp)
 
	RETURN
	END
